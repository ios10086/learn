(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{398:function(t,a,e){"use strict";e.r(a);var s=e(45),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),e("h3",{attrs:{id:"三大原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三大原则"}},[t._v("#")]),t._v(" 三大原则")]),t._v(" "),e("h5",{attrs:{id:"单一数据源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源"}},[t._v("#")]),t._v(" 单一数据源")]),t._v(" "),e("p",[t._v("整个应用的state被存储在一颗object tree中，并且这个object tree只存在唯一一个store中。")]),t._v(" "),e("h5",{attrs:{id:"state是只读的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state是只读的"}},[t._v("#")]),t._v(" State是只读的")]),t._v(" "),e("p",[t._v("唯一改变state的方法就是触发action，action是一个用于描述已发生时间的普通对象。")]),t._v(" "),e("h5",{attrs:{id:"使用纯函数来执行修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改"}},[t._v("#")]),t._v(" 使用纯函数来执行修改")]),t._v(" "),e("p",[t._v("为了描述action如何改变state tree， 需要编写reducers。")]),t._v(" "),e("h3",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("h5",{attrs:{id:"state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" State")]),t._v(" "),e("p",[t._v("在Redux应用中，所有的state都被保存在一个单一对象中，一个State对应一个View。")]),t._v(" "),e("h5",{attrs:{id:"action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),e("p",[t._v("Action是把数据从应用传到store的有效载荷，是store数据的唯一来源。Action本质上是JavaScript普通对象，action内必须使用一个字符串类型的 "),e("code",[t._v("type")]),t._v("字段来表示将要执行的动作。除了"),e("code",[t._v("type")]),t._v("字段，action对象的结构可以自由设置。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ADD_TODO")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Build my first Redux app'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),e("p",[t._v("Reducers指定了应用状态的变化如何响应actions并发送到store。Reducer就是一个纯函数，接受旧的state和action，返回新的state。")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("previousState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" newState\n")])])]),e("p",[t._v("不要在reducer中做这些操作：")]),t._v(" "),e("ul",[e("li",[t._v("修改传入参数；")]),t._v(" "),e("li",[t._v("执行有副作用的操作，如API请求和路由跳转；")]),t._v(" "),e("li",[t._v("调用非纯函数，如"),e("code",[t._v("Date.now()")]),t._v("或"),e("code",[t._v("Math.random()")])])]),t._v(" "),e("p",[t._v("只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。")]),t._v(" "),e("p",[t._v("由于 Reducer 是纯函数，就可以保证同样的State，必定得到同样的 View。但也正因为这一点，Reducer 函数里面不能改变 State，必须返回一个全新的对象。")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reducer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" defaultState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" thingToChange"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" Store")]),t._v(" "),e("p",[t._v("store是保存数据的地方，一个Redux应用只有一个store。")]),t._v(" "),e("p",[t._v("store创建：")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createStore "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" todoApp "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./reducers'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("todoApp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Store提供了三个方法：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("store.getState()")]),t._v("获取state")]),t._v(" "),e("li",[e("code",[t._v("store.dispatch(action)")]),t._v("更新state")]),t._v(" "),e("li",[e("code",[t._v("store.subscribe(listener)")]),t._v(" 注册监听器，一旦 State 发生变化，就自动执行这个函数。"),e("code",[t._v("store.subscribe")]),t._v("方法返回一个函数，调用这个函数就可以解除监听。")])]),t._v(" "),e("h5",{attrs:{id:"数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据流"}},[t._v("#")]),t._v(" 数据流")]),t._v(" "),e("p",[t._v("严格的单向数据流是Redux架构的设计核心。")]),t._v(" "),e("p",[t._v("Redux应用中数据的生命周期遵循下面4个步骤：")]),t._v(" "),e("ol",[e("li",[t._v("调用"),e("code",[t._v("store.dispatch(action)")])]),t._v(" "),e("li",[t._v("Redux Store调用传入的reducer函数")]),t._v(" "),e("li",[t._v("根reducer应该把多个子reducer输出合并成一个单一的state树。")]),t._v(" "),e("li",[t._v("Redux store保存了根reducer返回的完整state树。")])]),t._v(" "),e("h3",{attrs:{id:"react-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" react-redux")]),t._v(" "),e("h5",{attrs:{id:"容器组件-smart-container-components-和展示组件-dumb-presentational-components"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组件-smart-container-components-和展示组件-dumb-presentational-components"}},[t._v("#")]),t._v(" 容器组件（Smart/Container Components）和展示组件（Dumb/Presentational Components）")]),t._v(" "),e("p",[t._v("Redux的React绑定库是基于容器组件和展示组件相分离的开发思想。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}}),t._v(" "),e("th",[t._v("展示组件")]),t._v(" "),e("th",[t._v("容器组件")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("作用")]),t._v(" "),e("td",[t._v("描述如何展现（骨架、样式）")]),t._v(" "),e("td",[t._v("描述如何运行（数据获取、状态更新）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("直接使用Redux")]),t._v(" "),e("td",[t._v("否")]),t._v(" "),e("td",[t._v("是")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("数据来源")]),t._v(" "),e("td",[t._v("props")]),t._v(" "),e("td",[t._v("监听 Redux state")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("数据修改")]),t._v(" "),e("td",[t._v("从 props 调用回调函数")]),t._v(" "),e("td",[t._v("向 Redux 派发 actions")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("调用方式")]),t._v(" "),e("td",[t._v("手动")]),t._v(" "),e("td",[t._v("通常由 React Redux 生成")])])])]),t._v(" "),e("p",[t._v("大部分的组件都应该是展示型的，但一般需要少数的几个容器组件把它们和Redux store连接起来。")]),t._v(" "),e("h5",{attrs:{id:"provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),e("p",[t._v("Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。")]),t._v(" "),e("h5",{attrs:{id:"connect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect")]),t._v(" "),e("p",[t._v("connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），在接受一个参数（将要绑定的组件本身）。")]),t._v(" "),e("p",[t._v("mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。")]),t._v(" "),e("p",[t._v("mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单实用了，不需要手动dispatch。mapDIspatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用，这也是为什么要科里化的原因。")]),t._v(" "),e("h5",{attrs:{id:"middleware"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" Middleware")]),t._v(" "),e("p",[t._v("在Redux中，Middlerwares主要的作用就是处理Action，Redux中的Action必须是一个plain object。但是为了实现异步的Action或其他功能，这个Action可能就是一个函数，或者是一个promise对象。这是就需要中间件帮助来处理这种特殊的Action了。")]),t._v(" "),e("p",[t._v("也就是说，Redux中的Middleware会对特定类型action做一定的转换，所以最后传给reducer的action一定是标准的plain object。")]),t._v(" "),e("p",[t._v("针对Action的特征，Reudx Middleware可以采取不同的操作：")]),t._v(" "),e("ul",[e("li",[t._v("可以选择传递给下一个中间件，如：next(action)")]),t._v(" "),e("li",[t._v("可以选择跳过某些中间件，如：dispatch(action)")]),t._v(" "),e("li",[t._v("或者更直接了当的结束传递，如：return。")])]),t._v(" "),e("p",[t._v("Redux中常用的中间件：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.cnblogs.com/%20https:/github.com/gaearon/redux-thunk",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-thunk"),e("OutboundLink")],1),t._v("：action可以是一个函数，用来发起异步请求。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/acdlite/redux-promise",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-promise"),e("OutboundLink")],1),t._v("：action可以是一个promise对象，用来更优雅的进行异步操作。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/fcomb/redux-logger",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-logger"),e("OutboundLink")],1),t._v("：action就是一个标准的plain object，用来记录action和nextState的。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);